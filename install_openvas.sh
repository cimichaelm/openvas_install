#!/bin/sh

# SCRIPT GENERATED BY CHRISTIAN FERNANDEZ A MEMBER OF THE HISPAGATOS LABS



# arch linux: get install uuid https://aur.archlinux.org/packages/uuid
# arch linux: get install wmiclient https://aur.archlinux.org/packages/wmi-client/
# arch linux: install libpcap libssh libldap libksba  gpgme glib sqlite3 libxml2 libxslt  libmicrohttpd libxslt

# http://download.opensuse.org/repositories/security:/OpenVAS:/UNSTABLE:/v6/xUbuntu_13.04/amd64/

#    This script has a GPLv3 License
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#



BASEURL=http://wald.intevation.org/frs/download.php
DIRECTORY="openvas-dev"
WORKDIR="${HOME}/${DIRECTORY}"
#VERSION="+beta1"
VERSION=""
# version 7
SOURCESUBDIR="openvas-libraries-7.0"
LIBRARIES="openvas-libraries"
LIBRARIESID="2031"
LIBRARIESVER="7.0.10"
SCANNER="openvas-scanner"
SCANNERID="1959"
SCANNERVER="4.0.6"
MANAGER="openvas-manager"
MANAGERID="2035"
MANAGERVER="5.0.10"
GREENBONE="greenbone-security-assistant"
GREENBONEID="2039"
GREENBONEVER="5.0.7"
CLI="openvas-cli"
CLIID="1083"
CLIVER="1.3.1"
# version 8
SOURCESUBDIR="openvas-libraries-7.0"
LIBRARIES="openvas-libraries"
LIBRARIESID="2291"
LIBRARIESVER="8.0.7"
SCANNER="openvas-scanner"
SCANNERID="2266"
SCANNERVER="5.0.5"
MANAGER="openvas-manager"
MANAGERID="2295"
MANAGERVER="6.0.8"
GREENBONE="greenbone-security-assistant"
GREENBONEID="2299"
GREENBONEVER="6.0.10"
CLI="openvas-cli"
CLIID="2332"
CLIVER="1.4.4"


setup_build() {
    if [ ! -d ${WORKDIR} ]; then
	echo "Creating ${WORKDIR} directory"
	mkdir ${WORKDIR}
    fi
}

install_dependencies() {
# ubuntu 14.04
    echo "Installing needed packages"
    sudo apt-get -y install sudo build-essential make cmake nsis pkg-config nmap libssh-dev libgnutls-dev  libglib2.0-dev libpcap-dev libgpgme11-dev uuid-dev bison libksba-dev rsync sqlite3 libsqlite3-dev wget curl alien fakeroot libmicrohttpd-dev libxml2-dev libxslt1-dev xsltproc doxygen xmltoman sqlfairy libsnmp-dev libhiredis-dev
}



get_source() {
  Lfilebase=$1
  Lid=$2
  Lver=$3
  Lfilename="${Lfilebase}-${Lver}.tar.gz"
  echo "Downloading $Lfilename"

  cd $WORKDIR

  if [ ! -f "${Lfilename}" ]; then
    wget --directory-prefix $WORKDIR ${BASEURL}/${Lid}/${Lfilename}
  fi
}

extract_source() {
  Lfilebase=$1
  Lver=$2
  Lfilename="${Lfilebase}-${Lver}.tar.gz"

  echo "Extracting $Lfilename"

  tar zxvf ${Lfilename}
}

build_source() {
  Lfilebase=$1
  Lver=$2
  Lsubdir="${Lfilebase}-${Lver}"

  cd ${WORKDIR}/${Lsubdir}

  if [  -d "build" ]; then
    echo "removing build directory for $Lsubdir"
    rm -rf  build
  fi

  mkdir build

  cd build
  cmake -DCMAKE_INSTALL_PREFIX=/opt/openvas ..
  make
  make doc
  sudo make install
  make rebuild_cache
  cd $WORKDIR
}

get_build() {
  Lsubdir=$1
  Lid=$2
  Lver=$3
  Lrelease=$4

  echo "Downloading and building $Lsubdir version $Lver"

  get_source $Lsubdir $Lid $Lver $Lrelease

  extract_source $Lsubdir $Lver $Lrelease

  build_source $Lsubdir $Lver $Lrelease

}

configure_app() {
echo "Adding openvas to the enviroment PATH"
export PATH=/opt/openvas/bin:/opt/openvas/sbin:$PATH
sudo sh -c "echo 'export PATH=/opt/openvas/bin:/opt/openvas/sbin:$PATH' >> /etc/bash.bashrc" 

sudo sh -c "echo '/opt/openvas/lib' > /etc/ld.so.conf.d/openvas"
sudo sh -c "echo '/opt/openvas/lib' >> /etc/ld.so.conf"
sudo ldconfig


#configure

echo "CONFIGURE"

echo "sudo openvas-mkcert"
sudo /opt/openvas/sbin/openvas-mkcert

echo "Sync NVT"
sudo -b env  PATH="/opt/openvas/bin:/opt/openvas/sbin:$PATH" /opt/openvas/sbin/openvas-nvt-sync

sleep 10

echo "sudo openvas-mkcert-client -n -i"
sudo -b env  PATH="/opt/openvas/bin:/opt/openvas/sbin:$PATH" /opt/openvas/sbin/openvas-mkcert-client -n -i

echo "Starting the scanner"
sudo -b env  PATH="/opt/openvas/bin:/opt/openvas/sbin:$PATH" /opt/openvas/sbin/openvassd

sleep 10

echo "sudo openvasmd --rebuild"
sudo /opt/openvas/sbin/openvasmd --rebuild

sleep 10

echo "doing the ScapData Sync"
sudo -b env  PATH="/opt/openvas/bin:/opt/openvas/sbin:$PATH" /opt/openvas/sbin/openvas-scapdata-sync

sleep 10

echo "Doing the CertData sync"
sudo -b env  PATH="/opt/openvas/bin:/opt/openvas/sbin:$PATH" /opt/openvas/sbin/openvas-certdata-sync


sleep 10 


if [ !  -f "/opt/openvas/etc/openvas/pwpolicy.conf" ]; then
  echo "creating password policy file, read the doc and edit it as you need"
  sudo touch /opt/openvas/etc/openvas/pwpolicy.conf
fi


echo "Starting openvas manager"
sudo -b env  PATH="/opt/openvas/bin:/opt/openvas/sbin:$PATH" /opt/openvas/sbin/openvasmd

echo "Starting GreenBone security assistant"
sudo -b env  PATH="/opt/openvas/bin:/opt/openvas/sbin:$PATH" /opt/openvas/sbin/gsad

echo "Create config file"
sudo -b env  PATH="/opt/openvas/bin:/opt/openvas/sbin:$PATH" openvassd -s > /opt/openvas/etc/openvas/openvassd.conf


echo "Create your first user"
echo "openvasmd --first-user=myuser"


echo "if any issues download and run with the --v7 flag"
echo "wget --no-check-certificate https://svn.wald.intevation.org/svn/openvas/trunk/tools/openvas-check-setup"
}

install_dependencies
setup_build

cd ${WORKDIR}
echo "exporting PGK_CONFIG_PATH"
export PKG_CONFIG_PATH=/opt/openvas/lib/pkgconfig

wget --no-check-certificate https://svn.wald.intevation.org/svn/openvas/trunk/tools/openvas-check-setup

get_build $LIBRARIES $LIBRARIESID $LIBRARIESVER $VERSION

get_build $SCANNER $SCANNERID $SCANNERVER $VERSION

get_build $MANAGER $MANAGERID $MANAGERVER $VERSION

get_build $GREENBONE $GREENBONEID $GREENBONEVER $VERSION

get_build $CLI $CLIID $CLIVER $VERSION

configure_app


